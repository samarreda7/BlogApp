@model List<BlogApp.Core.DTOs.ShowPostsDTO>
@Html.AntiForgeryToken()
@{
    ViewData["Title"] = $"Posts by {ViewBag.FirstName}";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet">

<div class="container mt-5">
    <div class="mb-4">
        <a href="@Url.Action("Search", "Auth")" class="btn btn-outline-secondary">
            ← Back to Search
        </a>
    </div>

    <h2 class="mb-4 d-flex align-items-center gap-2 fw-bold text-dark">
        <i class="bi bi-person-circle"></i>
        Posts by @ViewBag.FirstName <small class="text-muted">@@@ViewBag.username</small>
    </h2>

    @if (!Model.Any())
    {
        <div class="alert alert-info">
            This user hasn't written any posts yet.
        </div>
    }
    else
    {
        <div class="feed">
            @foreach (var post in Model)
            {
                <div class="card mb-4 shadow-sm border-light">
                    <!-- Post Body -->
                    <div class="card-body">
                        <!-- User Info -->
                        <div class="d-flex align-items-center mb-3">
                            <div class="rounded-circle bg-primary text-white text-center me-3 d-flex align-items-center justify-content-center"
                                 style="width: 40px; height: 40px; font-size: 1rem;">
                                @post.FirstName[0]
                            </div>
                            <div>
                                <h6 class="mb-0 fw-bold">@post.FirstName</h6>
                                <small class="text-muted">@@@post.username</small>
                            </div>
                        </div>

                        <!-- Post Content -->
                        <div class="post-content mb-3">
                            <p class="mb-0">@post.Content</p>
                        </div>

                        <!-- Timestamp -->
                        @{
                            var created = post.CreatedAt;
                            var updated = post.updateat;
                            var isUpdated = (updated - created).TotalMinutes > 1;
                        }
                        <small class="text-muted">
                            @created.ToString("MMM dd, yyyy 'at' h:mm tt")
                            @if (isUpdated)
                            {
                                <span class="fst-italic">(edited on @updated.ToString("MMM dd, yyyy 'at' h:mm tt"))</span>
                            }
                        </small>

                        <hr class="my-3" />

                        
                        <div class="post-actions d-flex justify-content-between align-items-center mt-2">
                            <button type="button"
                                    class="btn btn-sm like-btn d-flex align-items-center gap-1 @(post.IsLikedByCurrentUser ? "btn-primary" : "btn-outline-primary")"
                                    data-post-id="@post.Id">
                                <i class="bi @(post.IsLikedByCurrentUser ? "bi-heart-fill" : "bi-heart")"></i>
                                <span>Like</span>
                                @if (post.LikeCount > 0)
                                {
                                    <span class="ms-1">(@post.LikeCount)</span>
                                }
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-secondary d-flex align-items-center gap-1">
                                <i class="bi bi-chat"></i> Comment
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-secondary d-flex align-items-center gap-1">
                                <i class="bi bi-share"></i> Share
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>
@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Anti-forgery token helper
            function getAntiForgeryToken() {
                const tokenField = document.querySelector('input[name="__RequestVerificationToken"]');
                return tokenField ? tokenField.value : '';
            }

            // Attach click handler to all like buttons
            document.querySelectorAll('.like-btn').forEach(button => {
             button.addEventListener('click', async function () {
            const postId = this.dataset.postId;
            const icon = this.querySelector('i');
            const countSpan = this.querySelector('span.ms-1'); // ← Updated selector

            try {
                const response = await fetch('/Post/ToggleLike', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ postId: postId })
                });

                if (response.ok) {
                    const result = await response.json();

                    // Update button appearance
                    if (result.liked) {
                        icon.classList.replace('bi-heart', 'bi-heart-fill');
                        this.classList.replace('btn-outline-primary', 'btn-primary');
                    } else {
                        icon.classList.replace('bi-heart-fill', 'bi-heart');
                        this.classList.replace('btn-primary', 'btn-outline-primary');
                    }

                    // Update like count — only show if > 0
                    if (result.likeCount > 0) {
                        if (countSpan) {
                            countSpan.textContent = `(${result.likeCount})`;
                        } else {
                            this.insertAdjacentHTML('beforeend', `<span class="ms-1">(${result.likeCount})</span>`);
                        }
                    } else {
                        if (countSpan) countSpan.remove();
                    }

                } else {
                    alert('Failed to toggle like. Please try again.');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An unexpected error occurred.');
            }
        });
            });
        });
    </script>
}